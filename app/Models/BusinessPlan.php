<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class BusinessPlan extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'plan_name',
        'plan_type', // 'startup', 'expansion', 'loan_application', 'investor_pitch'
        'version',
        'status', // 'draft', 'review', 'final', 'approved'
        // Executive Summary
        'executive_summary',
        'business_concept',
        'target_market',
        'competitive_advantage',
        'financial_highlights',
        // Company Description
        'company_mission',
        'company_vision',
        'company_values',
        'legal_structure',
        'location_description',
        'products_services_description',
        // Market Analysis
        'market_size',
        'market_trends',
        'target_customer_profile',
        'competitor_analysis',
        'market_positioning',
        // Marketing Strategy
        'marketing_objectives',
        'pricing_strategy',
        'promotional_strategy',
        'sales_channels',
        'customer_acquisition_strategy',
        // Operations Plan
        'operational_workflow',
        'staffing_plan',
        'technology_requirements',
        'supplier_relationships',
        'quality_control',
        // Management Team
        'management_structure',
        'key_personnel',
        'advisory_board',
        'organizational_chart',
        // Financial Projections
        'funding_requirements',
        'revenue_projections',
        'expense_projections',
        'profit_projections',
        'break_even_analysis',
        'cash_flow_projections',
        'financial_assumptions',
        // Risk Analysis
        'market_risks',
        'operational_risks',
        'financial_risks',
        'mitigation_strategies',
        // Implementation Timeline
        'milestones',
        'timeline',
        'success_metrics',
        // Appendices
        'supporting_documents',
        'financial_statements',
        'market_research_data',
        'legal_documents',
        // Metadata
        'created_for_purpose',
        'target_audience',
        'last_reviewed_date',
        'next_review_date',
        'auto_generated_sections', // JSON array of sections that were auto-generated
        'is_template',
        'template_industry',
    ];

    protected $casts = [
        'last_reviewed_date' => 'date',
        'next_review_date' => 'date',
        'auto_generated_sections' => 'array',
        'is_template' => 'boolean',
        'financial_highlights' => 'array',
        'revenue_projections' => 'array',
        'expense_projections' => 'array',
        'profit_projections' => 'array',
        'cash_flow_projections' => 'array',
        'milestones' => 'array',
        'timeline' => 'array',
        'supporting_documents' => 'array',
    ];

    // Belongs to a user
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // Related business profile
    public function businessProfile()
    {
        return $this->hasOneThrough(BusinessProfile::class, User::class, 'id', 'user_id', 'user_id', 'id');
    }

    // Related financial projections
    public function financialProjections()
    {
        return $this->hasMany(FinancialProjection::class, 'business_plan_id');
    }

    // Auto-generate plan sections from existing data
    public function autoGenerateFromData()
    {
        $user = $this->user;
        $businessProfile = $user->businessProfile ?? null;
        $autoGenerated = [];

        if ($businessProfile) {
            // Auto-generate company description
            if (!$this->company_mission && $businessProfile->business_description) {
                $this->company_mission = $this->generateMissionFromDescription($businessProfile->business_description);
                $autoGenerated[] = 'company_mission';
            }

            // Auto-generate target market
            if (!$this->target_market && $businessProfile->target_customers) {
                $this->target_market = $businessProfile->target_customers;
                $autoGenerated[] = 'target_market';
            }

            // Auto-generate financial highlights from recent data
            $this->generateFinancialHighlights();
            $autoGenerated[] = 'financial_highlights';

            // Auto-generate revenue projections
            $this->generateRevenueProjections();
            $autoGenerated[] = 'revenue_projections';

            $this->auto_generated_sections = $autoGenerated;
        }

        return $this;
    }

    private function generateMissionFromDescription($description)
    {
        // Simple mission statement generation - could be enhanced with AI
        $businessName = $this->user->businessProfile->business_name ?? 'Our company';
        return "At {$businessName}, our mission is to {$description} while providing exceptional value to our customers and contributing to our community's growth.";
    }

    private function generateFinancialHighlights()
    {
        $userId = $this->user_id;
        
        // Get recent financial data
        $recentPL = ProfitLossRecord::where('user_id', $userId)
            ->orderBy('period_end', 'desc')
            ->first();

        $recentBS = BalanceSheetRecord::where('user_id', $userId)
            ->orderBy('as_of_date', 'desc')
            ->first();

        $highlights = [];

        if ($recentPL) {
            $highlights['annual_revenue'] = $recentPL->revenue;
            $highlights['net_profit'] = $recentPL->net_profit;
            $highlights['profit_margin'] = $recentPL->net_profit_margin;
            $highlights['gross_margin'] = $recentPL->gross_profit_margin;
        }

        if ($recentBS) {
            $highlights['total_assets'] = $recentBS->total_assets;
            $highlights['current_ratio'] = $recentBS->current_ratio;
            $highlights['debt_to_equity'] = $recentBS->debt_to_equity_ratio;
        }

        $this->financial_highlights = $highlights;
    }

    private function generateRevenueProjections()
    {
        // Generate 3-year revenue projections based on historical data and growth assumptions
        $userId = $this->user_id;
        
        $historicalRevenue = ProfitLossRecord::where('user_id', $userId)
            ->orderBy('period_end', 'desc')
            ->take(12) // Last 12 periods
            ->pluck('revenue')
            ->toArray();

        if (count($historicalRevenue) >= 3) {
            $avgGrowthRate = $this->calculateGrowthRate($historicalRevenue);
            $baseRevenue = $historicalRevenue[0] ?? 0;

            $projections = [];
            for ($year = 1; $year <= 3; $year++) {
                $projections["year_{$year}"] = $baseRevenue * pow(1 + $avgGrowthRate, $year);
            }

            $this->revenue_projections = $projections;
        }
    }

    private function calculateGrowthRate($revenues)
    {
        if (count($revenues) < 2) return 0.1; // Default 10% growth

        $growthRates = [];
        for ($i = 1; $i < count($revenues); $i++) {
            if ($revenues[$i] > 0) {
                $growthRates[] = ($revenues[$i-1] - $revenues[$i]) / $revenues[$i];
            }
        }

        return count($growthRates) > 0 ? array_sum($growthRates) / count($growthRates) : 0.1;
    }

    // Generate executive summary
    public function generateExecutiveSummary()
    {
        $businessProfile = $this->user->businessProfile;
        if (!$businessProfile) return null;

        $summary = "Business Overview:\n";
        $summary .= "{$businessProfile->business_name} is a {$businessProfile->business_type} business operating in the {$businessProfile->industry_sector} sector. ";
        $summary .= "Established {$businessProfile->business_age_years} years ago, we serve {$businessProfile->primary_market} markets.\n\n";

        if ($this->financial_highlights) {
            $summary .= "Financial Highlights:\n";
            $highlights = $this->financial_highlights;
            if (isset($highlights['annual_revenue'])) {
                $summary .= "• Annual Revenue: KES " . number_format($highlights['annual_revenue']) . "\n";
            }
            if (isset($highlights['net_profit'])) {
                $summary .= "• Net Profit: KES " . number_format($highlights['net_profit']) . "\n";
            }
            if (isset($highlights['profit_margin'])) {
                $summary .= "• Profit Margin: " . round($highlights['profit_margin'], 1) . "%\n";
            }
        }

        return $summary;
    }

    // Export to different formats
    public function exportToPdf()
    {
        // This would integrate with a PDF generation service
        // For now, return the data structure for PDF generation
        return [
            'title' => $this->plan_name,
            'sections' => [
                'Executive Summary' => $this->executive_summary ?: $this->generateExecutiveSummary(),
                'Company Description' => [
                    'Mission' => $this->company_mission,
                    'Vision' => $this->company_vision,
                    'Products/Services' => $this->products_services_description,
                ],
                'Market Analysis' => [
                    'Target Market' => $this->target_market,
                    'Market Size' => $this->market_size,
                    'Competitors' => $this->competitor_analysis,
                ],
                'Financial Projections' => [
                    'Revenue Projections' => $this->revenue_projections,
                    'Financial Highlights' => $this->financial_highlights,
                ],
                'Implementation' => [
                    'Milestones' => $this->milestones,
                    'Timeline' => $this->timeline,
                ],
            ],
        ];
    }
} 